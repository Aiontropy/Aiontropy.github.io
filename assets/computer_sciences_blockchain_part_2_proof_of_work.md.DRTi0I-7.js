import{_ as i,c as a,o as n,ae as h}from"./chunks/framework.BD_Yrv4e.js";const c=JSON.parse('{"title":"Proof of Work","description":"","frontmatter":{"Reference":"https://jeiwan.net/posts/building-blockchain-in-go-part-1/"},"headers":[],"relativePath":"computer_sciences/blockchain/part_2_proof_of_work.md","filePath":"computer_sciences/blockchain/part_2_proof_of_work.md"}'),p={name:"computer_sciences/blockchain/part_2_proof_of_work.md"};function t(l,s,k,e,E,d){return n(),a("div",null,[...s[0]||(s[0]=[h(`<h1 id="proof-of-work" tabindex="-1">Proof of Work <a class="header-anchor" href="#proof-of-work" aria-label="Permalink to &quot;Proof of Work&quot;">​</a></h1><p>目前，已经有了一个基本的区块链结构了。但是现在谁都可以向区块链中添加区块，因此需要一个机制来筛选谁来为区块链添加方块。这个机制就是 <strong>工作量证明（ Proof of Work, PoW)</strong> 。这个设计是 BTC 去中心化，抗攻击，安全的基础。<br> 这里的工作证明是什么</p><blockquote><p>工作就是大家常说的 <strong>挖矿</strong> ，而挖矿的本质就是通过计算寻找符合条件的 <code>Nonce</code> ， <code>Nonce</code> 是区块链的区块头（Block Header）中，Nonce 是一个 <strong>32位（4字节）的整数字段</strong>。 <code>Block Header</code> 中只有 Nonce 是可以不断调整的值，，直到满足网络的难度要求（即哈希值小于目标值）。</p></blockquote><h2 id="proof-of-work-1" tabindex="-1">Proof of Work <a class="header-anchor" href="#proof-of-work-1" aria-label="Permalink to &quot;Proof of Work&quot;">​</a></h2><p>区块链的一个关键点是，一个人必须完成一些困难的工作，才能讲数据存入数据库中。完成这个工作保证了区块链安全和一致。完成这个工作的人，也会获得相应的奖励。<br> 在区块链中，是通过网络中的参与者（矿工）不断的工作来支撑起了整个网络。矿工不断地向区块链中加入新块，然后获得相应的奖励。在这种机制的作用下，新生成的区块能够被安全地加入到区块链中，它维护了整个区块链数据库的稳定性。值得注意的是，完成了这个工作的人必须要证明这一点，即他必须要证明他的确完成了这些工作。<br> 这里努力工作的证明，就叫 <strong>工作量证明(PoW)</strong> 。工作需要大量计算，所以即使是高性能的计算机也不能很快速的完成。另外，技术的发展，这个工作的难度会越来越大，以保证每 10 分钟挖出 1 个区块的速度。</p><h2 id="hashing" tabindex="-1">hashing <a class="header-anchor" href="#hashing" aria-label="Permalink to &quot;hashing&quot;">​</a></h2><p>哈希计算是指获取一个数据哈希的过程。哈希是数据的唯一标识，类似于数据的身份证号码。对于同一段数据，同一个哈希函数，得到的哈希结果也是一样的，而不的数据在同一个哈希函数下，得到的哈希结果不同。<br> 哈希的关键特征：</p><blockquote><p>无法从一个哈希值恢复原始数据，也就是说，哈希不是加密，它无法解密。<br> 对于特定的数据，只能有唯一的一个哈希，并且这个哈希也是唯一的。<br> 即使只改变一个字符，哈希计算出来的结果也会完全不相同，没有规律。</p></blockquote><p>在区块链中，哈希被用在保证块的一致性。将前一个块的数据通过哈希计算获取哈希，放在当前块的最前面，因此几乎不可能去修改区块链中前面的数据，如果一个人想要修改前面的某一个块，那么他必须要重新计算这个块以及后面所有块的哈希。</p><h2 id="hashcash" tabindex="-1">Hashcash <a class="header-anchor" href="#hashcash" aria-label="Permalink to &quot;Hashcash&quot;">​</a></h2><p>BTC 使用的是 <a href="https://en.wikipedia.org/wiki/Hashcash" target="_blank" rel="noreferrer">Hashcash</a>，这最初是一个用来防止垃圾邮件的算法。它分为一下的步骤：</p><ol><li>取一些公开的数据（ Email 里通常是接收者的邮件地址；在 BTC 中，通常是区块的头部）。</li><li>添加一个计数器 <code>counter</code> ，这通常从0 开始。</li><li>获取 <code>data</code> 和 <code>counter</code> 的哈希。</li><li>检查一下哈希是否符合条件： <ol><li>如果符合条件，结束</li><li>如果不符合条件，增加计数器，重复步骤 3-4</li></ol></li></ol><blockquote><p>以邮箱为例，它就是要求发邮件的人在发送之前完成一定的计算任务，以此来做为 <strong>工作量证明</strong> 。例如发送前先将收件人的地址和 <code>Nonce</code> 等数据连接在一起，进行哈希计算，然后调整 <code>Nonce</code> ，使哈希满足前导零数量要求，接收方验证计算的合法性，这样可以增加攻击者的成本，减少滥用。这里的 <code>Nonce</code> 就是计数器， <code>Nonce</code> 是一个密码学术语。</p></blockquote><p>因此，这是一个暴力算法：改变 <code>Nonce</code> 或者 <code>counter</code> ，哈希计算，检查，修改计数器，一直重复，直到达到目标。这就是为什么说计算成本高，因为本身哈希计算的成本就相对普通计算来说比较高，还需要不断的重复。</p><p>在原始的 Hashcash 上，它会要求哈希满足前导零数量 &gt;= <code>Bits / 4</code> （每 4 Bits 对应 1 个十六进制零）。</p><blockquote><p>例如： <code>Bits = 20</code> ，则要求知道有 5 个十六进制的前导零（20 / 4 =5）。</p></blockquote><p>对于 BTC 来说，它的要求则是根据矿工的数量和算力动态调整的，以保证每十分钟生成一个区块。</p><h2 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h2><p>首先需要定义挖矿的难度：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TargetBits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span></span></code></pre></div><p>在 BTC 中， <code>TargetBits</code> 是在 Blocker Header 中存储的，用来定义区块被挖出的难度。如果它的值是 10 ，则表示哈希的前 10 个前导数必须是 0 ，如果是24 ，则表示哈希的前 24 个前导数必须是 0 。这里没有算力的变化，也没有矿工，因此定义一个常量。<br> BTC 的动态调整规则的，它是根据最新生成的区块的时间减去上一个区块的时间，动态调整。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProofOfWork</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Block  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">blockchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Block</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">big</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NewProofOfWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">blockchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProofOfWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> big.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	target.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Lsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">256</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TargetBits))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	pow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProofOfWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{b, target}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pow</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这里创建了一个 <code>ProofOfWork</code> 的结构体用来指向块的指针和指向 target 。这里的 &quot;target&quot; 就是前面的目标，将区块的哈希转换成一个大整数，和它进行比较，如果哈希小于目标，则说明成功挖到矿了。<br> 在 <code>NewProofOfWork</code> 中，初始化一个大整数，然后左移 <code>256 - TargetBis</code> 位，256 是哈希算法 SHA-h56 的哈希位数。 BTC 使用的也是 SHA-256 。<code>Target</code> 的十六进制数的表示是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>0x10000000000000000000000000000000000000000000000000000000000</span></span></code></pre></div><p>它在内存中占 29 个字节。<br> 字符 &quot;I like donuts&quot; 的 SHA-256 结果为:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>f80867f6efd4484c23b0e7184e53fe4af6ab49b97f5293fcd50d5b2bfa73a4d0</span></span>
<span class="line"><span>0000010000000000000000000000000000000000000000000000000000000000</span></span></code></pre></div><p>它的结果比 <code>Target</code> 要大，因此，这不是一个有效的 PoW 。而 &quot;I like donutsca07ca&quot; 的哈希结果是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>0000002f7c1fe31cb82acdc082cfec47620b7e4ab94f2bf9e096c436fc8cee06</span></span>
<span class="line"><span>0000010000000000000000000000000000000000000000000000000000000000</span></span></code></pre></div><p>它的结果比 <code>Target</code> 要小，因此这是一个有效 PoW 。<br> 可以把目标值看作是一个边界，只要小于这个边界，那就是有效的，只要大于这个边界，那就是无效的。</p><p>现在写一个准备哈希数据的函数：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProofOfWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prepareData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nonce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[][]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			pow.Block.PrevBlockHash,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			pow.Block.Data,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			IntToHex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pow.Block.Timestamp),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			IntToHex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TargetBits)),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			IntToHex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nonce)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>将这里的数据全部拼接起来，这里的 <code>nonce</code> 就是前面 Hashcash 说的计数器。</p><p>再然后就是最重要的 PoW 算法了：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProofOfWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hashInt </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">big</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hash [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	nonce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mining the block containing </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;%s\\&quot;\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pow.Block.Data)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nonce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math.MaxInt64 {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prepareData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nonce)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		hash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sha256.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sum256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		hashInt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hash[:])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r%x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hash)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hashInt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pow.target) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r%x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hash)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			break</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			nonce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nonce, hash[:]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>首先定义一个变量 <code>hashInt</code> ，这是 hash 的整数表示形式， <code>nonce</code> 是计数器。然后做一个无限循环，限制大小为 <code>big.MaxBase</code> 以防止溢出。循环中，准备数据，然后计算哈希，将哈希转换为一个整数，最后和目标进行对比，知道小于目标值。</p><p>现在的哈希需要在里面加上 PoW ，因此前面的 <code>SetHash</code> 函数可以删除或者注释掉了， <code>Block</code> 结构体需要在里面加上 <code>Nonce</code> ，而 <code>NewBlock</code> 函数需要在里面加上 Pow ，因此需要修改</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Block</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Timestamp     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Data          []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	PrevBlockHash []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Hash          []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Nonce         </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NewBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prevBlockHash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	block </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data), []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prevBlockHash), []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// block.SetHash()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	pow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proofofwork.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewProofOfWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	nonce, hash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	block.Hash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hash[:]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	block.Nonce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nonce</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> block</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这里 <code>nonce</code> 被保存在 <code>Block</code> 中， <code>nonce</code> 可以用来证明你的工作量。</p><p>重新运行项目：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Mining the block containing &quot;Genesis Block&quot;</span></span>
<span class="line"><span>00000001fe0390daad62fd570077bfffa7bca5838252c1821d5cc850c6330946</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Mining the block containing &quot;Send 1&quot;</span></span>
<span class="line"><span>00000039b5f5483dbe087f4674c58431a0ad66083d68c090e499d62047eb5565</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Mining the block containing &quot;Send 2&quot;</span></span>
<span class="line"><span>00000015f0d30557d087551c072acda4905c6dd9977f2fd7082e43fbd5feece0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Mining the block containing &quot;Send 3&quot;</span></span>
<span class="line"><span>000000c986a66a6e859c96928f0d55d46489abf5c394f4362e6a4b92bdac65e3</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Prev. hash: </span></span>
<span class="line"><span>Data: Genesis Block</span></span>
<span class="line"><span>Hash: 00000001fe0390daad62fd570077bfffa7bca5838252c1821d5cc850c6330946</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Prev. hash: 00000001fe0390daad62fd570077bfffa7bca5838252c1821d5cc850c6330946</span></span>
<span class="line"><span>Data: Send 1</span></span>
<span class="line"><span>Hash: 00000039b5f5483dbe087f4674c58431a0ad66083d68c090e499d62047eb5565</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Prev. hash: 00000039b5f5483dbe087f4674c58431a0ad66083d68c090e499d62047eb5565</span></span>
<span class="line"><span>Data: Send 2</span></span>
<span class="line"><span>Hash: 00000015f0d30557d087551c072acda4905c6dd9977f2fd7082e43fbd5feece0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Prev. hash: 00000015f0d30557d087551c072acda4905c6dd9977f2fd7082e43fbd5feece0</span></span>
<span class="line"><span>Data: Send 3</span></span>
<span class="line"><span>Hash: 000000c986a66a6e859c96928f0d55d46489abf5c394f4362e6a4b92bdac65e3</span></span></code></pre></div><p>现在，哈希的开头有许多 <strong>0</strong> 。</p><p>最后就是需要验证工作了。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProofOfWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hashInt </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">big</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prepareData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pow.Block.Nonce)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	hash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sha256.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sum256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	hashInt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hash[:])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	isValid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hashInt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pow.target) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isValid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 main 函数中添加验证的方法。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _, block </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bc.Blocks {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		pow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blockchain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewProofOfWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PoW: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>最后加了个一个计时器，挖三个区块就用了快五十分钟:(</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Mining the block containing </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Genesis Block&quot;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">00000078b9de817a51773255985ee8f0013c3a653280f12d4f60c4309fb0d74d</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Mining the block containing </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Send 1&quot;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">0000006cf3226aa8ab3fbe2771f2b2a5c49e13a7e0ffae3014c540bf47d2ed5f</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Mining the block containing </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Send 2&quot;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">0000001553ed175a610ad68a538084651baa2ca4e5b8e408708ce3ea49e9064f</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Mining the block containing </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Send 3&quot;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">0000009418fca42d1fe3489204d8ce374f98c0cdab898a489ef883077eeb5a2b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Prev. hash: </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Data: Genesis Block</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hash: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">00000078b9de817a51773255985ee8f0013c3a653280f12d4f60c4309fb0d74d</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PoW: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Prev. hash: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">00000078b9de817a51773255985ee8f0013c3a653280f12d4f60c4309fb0d74d</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Data: Send </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hash: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">0000006cf3226aa8ab3fbe2771f2b2a5c49e13a7e0ffae3014c540bf47d2ed5f</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PoW: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Prev. hash: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">0000006cf3226aa8ab3fbe2771f2b2a5c49e13a7e0ffae3014c540bf47d2ed5f</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Data: Send </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hash: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">0000001553ed175a610ad68a538084651baa2ca4e5b8e408708ce3ea49e9064f</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PoW: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Prev. hash: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">0000001553ed175a610ad68a538084651baa2ca4e5b8e408708ce3ea49e9064f</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Data: Send </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hash: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">0000009418fca42d1fe3489204d8ce374f98c0cdab898a489ef883077eeb5a2b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PoW: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Time</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">consuming </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">46m4.7701423s</span></span></code></pre></div><p>这里显示的也是 <code>true</code> ，说明 PoW 被验证了。</p>`,49)])])}const o=i(p,[["render",t]]);export{c as __pageData,o as default};
