import{_ as a,c as e,o as d,ae as n}from"./chunks/framework.tuuL-SzM.js";const b=JSON.parse('{"title":"其他","description":"","frontmatter":{},"headers":[],"relativePath":"course/6.S081/another.md","filePath":"course/6.S081/another.md"}'),r={name:"course/6.S081/another.md"};function s(o,t,i,l,h,p){return d(),e("div",null,t[0]||(t[0]=[n(`<h1 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h1><h2 id="gdb-xv6" tabindex="-1">GDB xv6 <a class="header-anchor" href="#gdb-xv6" aria-label="Permalink to &quot;GDB xv6&quot;">​</a></h2><p>Ubuntu 中使用 GDB 试了很久，也问了 AI ， GDB 调试都不行。最后在别人的 <a href="https://jackeryli.github.io/xv6/xv6-gdb/" target="_blank" rel="noreferrer">blog</a> 看到如何使用。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Run xv6 with gdb</span></span>
<span class="line"><span>make qemu-gdb</span></span>
<span class="line"><span># Change to another terminal and connect to xv6-gdb</span></span>
<span class="line"><span>gdb-multiarch -x .gdbinit</span></span></code></pre></div><p>可能是由于系统架构问题，课程中老师使用的可能是 riscV64 架构的，我在 WSL 的 Ubuntu 中是 x86_64 架构的。</p><h2 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>缩写</th><th>描述</th></tr></thead><tbody><tr><td>next</td><td>n</td><td>单步执行</td></tr><tr><td>step</td><td>s</td><td>单步进入</td></tr><tr><td>break</td><td>b</td><td>设置断点</td></tr><tr><td>continue</td><td>c</td><td>继续执行</td></tr><tr><td>info</td><td>i</td><td>信息</td></tr><tr><td>layout split</td><td>无</td><td>水平显示源码和汇编</td></tr><tr><td>until</td><td>u</td><td>跳出循环</td></tr></tbody></table>`,7)]))}const u=a(r,[["render",s]]);export{b as __pageData,u as default};
