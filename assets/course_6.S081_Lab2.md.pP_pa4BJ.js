import{_ as s,c as a,o as n,ae as l}from"./chunks/framework.tuuL-SzM.js";const y=JSON.parse('{"title":"Lab: system calls","description":"","frontmatter":{},"headers":[],"relativePath":"course/6.S081/Lab2.md","filePath":"course/6.S081/Lab2.md"}'),c={name:"course/6.S081/Lab2.md"};function p(o,e,r,t,m,i){return n(),a("div",null,e[0]||(e[0]=[l(`<h1 id="lab-system-calls" tabindex="-1">Lab: system calls <a class="header-anchor" href="#lab-system-calls" aria-label="Permalink to &quot;Lab: system calls&quot;">​</a></h1><p>开始写代码之前，需要先读 xv6 文档的第二章，还有第四章的 4.3 和 4.4 ，还需要看源码 <em>user/user.h</em> <em>user/usys.pl</em> <em>kernel/syscall.h</em> <em>kernel/syscall.c</em> <em>kernel/proc.h</em> <em>kernel/proc.c</em></p><p>开始之前，切换到系统调用分支</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git fetch</span></span>
<span class="line"><span>git checkout syscall</span></span>
<span class="line"><span>make clean</span></span></code></pre></div><p>如果运行 <code>make grade</code> ，不能正常执行 <em>trace</em> 和 <em>sysinfotest</em> ，那就说明可以开始了，这个 Lab 的任务就是实现这两个功能</p><h2 id="system-call-tracing-moderate" tabindex="-1">System call tracing(moderate) <a class="header-anchor" href="#system-call-tracing-moderate" aria-label="Permalink to &quot;System call tracing(moderate)&quot;">​</a></h2><blockquote><p>这个功能是一项系统调用的跟踪功能，后续可能会用到。创建一个新的系统调用 <em>trace</em> 用来控制跟踪程序。它应该接收一个参数，是一个整数 &quot;mask&quot; 掩码，掩码的位数制定了要跟踪的系统调用。例如：追踪 <em>fork</em> 的调用，一个程序调用 <em>trace(1 &lt;&lt; SYS_fork)</em> ，其中的 <em>SYS_fork</em> 就是 <em>kernel/syscall.h</em> 中的系统调用的编号。需要修改 xv6 的内核，以便在每个系统调用即将返回时，如果掩码中设置了系统调用编号，就打印出一行输出。这行输出包括进程的 ID 、系统调用的名称和返回值；不需要打印系统掉的参数。<em>trace</em> 系统调用需要能对调的进程以及 <em>fork</em> 出的子进程进行跟踪，但是不能影响其他进程</p></blockquote><p>可以参考跟踪用户程序的代码 (user/trace.c)</p><p>实现完成的输出:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ trace 32 grep hello README</span></span>
<span class="line"><span>3: syscall read -&gt; 1023</span></span>
<span class="line"><span>3: syscall read -&gt; 966</span></span>
<span class="line"><span>3: syscall read -&gt; 70</span></span>
<span class="line"><span>3: syscall read -&gt; 0</span></span>
<span class="line"><span>$</span></span>
<span class="line"><span>$ trace 2147483647 grep hello README</span></span>
<span class="line"><span>4: syscall trace -&gt; 0</span></span>
<span class="line"><span>4: syscall exec -&gt; 3</span></span>
<span class="line"><span>4: syscall open -&gt; 3</span></span>
<span class="line"><span>4: syscall read -&gt; 1023</span></span>
<span class="line"><span>4: syscall read -&gt; 966</span></span>
<span class="line"><span>4: syscall read -&gt; 70</span></span>
<span class="line"><span>4: syscall read -&gt; 0</span></span>
<span class="line"><span>4: syscall close -&gt; 0</span></span>
<span class="line"><span>$</span></span>
<span class="line"><span>$ grep hello README</span></span>
<span class="line"><span>$</span></span>
<span class="line"><span>$ trace 2 usertests forkforkfork</span></span>
<span class="line"><span>usertests starting</span></span>
<span class="line"><span>test forkforkfork: 407: syscall fork -&gt; 408</span></span>
<span class="line"><span>408: syscall fork -&gt; 409</span></span>
<span class="line"><span>409: syscall fork -&gt; 410</span></span>
<span class="line"><span>410: syscall fork -&gt; 411</span></span>
<span class="line"><span>409: syscall fork -&gt; 412</span></span>
<span class="line"><span>410: syscall fork -&gt; 413</span></span>
<span class="line"><span>409: syscall fork -&gt; 414</span></span>
<span class="line"><span>411: syscall fork -&gt; 415</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>$</span></span></code></pre></div><p>在第一个例子中， <em>trace</em> 值调用了 <em>grep</em> 来跟踪 <em>read</em> 系统调用。32 是指 <em>1&lt;&lt;SYS_read</em><br> 在第二个例子中， <em>trace</em> 运行 <em>grep</em> ，同时跟踪所有的系统调用； 2147583647 设置了全部 31 个低位 在第三个例子中，运行的程序不是 <em>trace</em> ，所以没有打印出 <em>trace</em> 输出 在第四个例子中， <em>trace</em> 了 <em>usertests</em> 中的 <em>forkforkfork</em> 测试的所有子进程的系统调用 如果测试代码和上面一样，那么就是正确的 (进程 ID 可能会出现不一样)</p><p><strong>实验提示</strong></p><ul><li>添加 <em>$U/_trace</em> 到 Makefile 的 UPROGS 里</li><li>运行 <em>make qemu</em> 你将看到不能正确编译 <em>user/trace.c</em> ，这是因为用户空间存根还不存在：将系统调用的原型添加到 <em>user/user.h</em> ，将存根添加到 <em>user/user.pl</em> ，以及将系统调用号添加到 <em>kernel/syscall.h</em> 中。 Makefile 会调用 perl 脚本 (user/usys.pl) ，生成 <em>user/usys.S</em> ，时间的系统调用存根，它使用的是 RISC-V 的 <code>ecall</code> 指令转换到内核。修复编译问题后，运行 <code>trace 32 grep hello README</code> 会失败，因为还没有在内核中实现系统调用</li><li>在 <em>kernel/sysproc.c</em> 中添加一个 <code>sys_trace()</code> 的方法，这个方法通过在 <code>proc</code>(参见 <em>kernel/proc.h</em>) 中的一个新变量记住新系统调用的参数来调用新的系统调用。从用户空间获取系统调用参数的函数在 <em>kernel/syscall.c</em> 中，你可以在 <em>kernel/sysproc.c</em> 中看到使用这些函数的示例。</li><li>修改 <code>fork()</code>(参见 <em>kernel/proc.c</em>) 用来跟踪掩码从父进程复制到子进程</li><li>修改 <em>kernel/syscall.c</em> 中的 <code>syscall()</code> 用来打印 <em>trace</em> 的输出，需要添加一个名为 &quot;syscall&quot; 的数组，用来做索引</li></ul><p><strong>实验思路</strong></p><ol><li>首先根据要求，切换分支，然后根据提示，修改 <em>Makefile</em> , <em>user/user.h</em>, <em>user/user.pl</em>, <em>kernel/syscall.h</em>,这时候外面的环境就已经配置好了。可以进入 xv6 运行一下 <code>trace 32 grep hello README</code> ，虽然还是会报错，但是以及可以进入 xv6 且可以调用 trace 了。</li><li>根据提示，在 <em>kernel/sysproc.c</em> 中添加一个 <code>sys_trace()</code> 的函数，这里无从下手，但是提示说<strong>在 proc 的结构中一个新变量</strong>，加上后面的提示有一个掩码，推测应该是要在 proc 结构体中新加一个掩码变量，然后给它赋值，观看 <code>kernel/sysproc.c</code> 的函数，发现一个 <code>myproc()</code> 函数，返回的是指针，因此直接用 <code>myproc()</code> 获取 <code>proc</code> ，然后使用 <code>argint()</code> 获取参数，传入刚刚新添加的变量中。</li><li>接着就是根据提示，修改 <code>fork()</code> 函数，阅读代码能看出，变量 <code>np</code> 是子程序，直接在最后的 <code>return</code> 前面给 <code>np</code> 的掩码赋值。</li><li>最后就是要打印 trace ，修改 <em>kernel/syspro.c</em> ，先看代码，看到一个 a7 ，通过 xv6 book 了解到， a7 是系统调用号，做了判断之后，通过一个函数指针执行了一个函数，函数指针指向的是一个函数，然后 xv6 book 上说，系统调用函数返回的值在 a0 中，因此应该需要在这条函数指针后面编写打印语句。</li><li>由于系统调用函数很多，需要判断一下，直接使用位运算就可以判断，然后就是按照实例的格式打印，PID 存储在 proc 中，syscall name 这里没有，需要自己写一个数组，返回值就是 a0 。</li></ol><p><strong>踩到的坑</strong></p><ul><li>在 <em>user/user.h</em> 中，看实例以为应该填写的是 <code>int trace(int, char*);</code> ，但是 <code>make qemu</code> 还是报错了，但是看报错信息，发现 <code>trace()</code> 的参数应该是一个 <code>int</code> 。</li><li>syscall name 在 xv6 中没有，想了好久都不知道怎么办，一问 ai 才知道要自己写一个数组。</li></ul><h2 id="sysinfo-moderate" tabindex="-1">Sysinfo (moderate) <a class="header-anchor" href="#sysinfo-moderate" aria-label="Permalink to &quot;Sysinfo (moderate)&quot;">​</a></h2><p><strong>实验思路</strong></p><ol><li>实验提示非常简单，描述也非常简单。根据提示修改一些文件，要注意看前一个 lab 的提示。然后看提示中的代码，可以知道如何使用 <code>copyout()</code> 传输数据。</li><li>在 <em>sysproc.c</em> 中，修改新建一个 <code>sysinfo()</code> 函数，在这个函数里使用 <code>copyout()</code> 将输出传输到用户态下。</li><li>根据提示，实现两个函数，一个是获取到所有剩余内存，看一下前面的代码，可以看到一个 <code>freelist</code> 变量，这个变量是用来记录未使用的内存的，因此只需要遍历以此就可以了；第二个是查看当前存在的进程，提示说只要进程的状态不是 <code>UNUSED</code> 都属于存在，观看前面的代码，可以看到一个数组 <code>proc</code> ，这类似于一个进程池，将它遍历一边，进行判断就可以了。</li></ol><p><strong>扩展</strong>： 为什么 xv6 使用链表实现内存？</p><blockquote><p>xv6 的内存使用链表实现，主要是为了可读性，同时实现简单</p></blockquote>`,22)]))}const k=s(c,[["render",p]]);export{y as __pageData,k as default};
