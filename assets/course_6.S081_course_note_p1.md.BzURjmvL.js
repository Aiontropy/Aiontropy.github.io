import{_ as a,c as t,o,ae as r}from"./chunks/framework.BD_Yrv4e.js";const d=JSON.parse('{"title":"操作系统","description":"","frontmatter":{},"headers":[],"relativePath":"course/6.S081/course_note_p1.md","filePath":"course/6.S081/course_note_p1.md"}'),n={name:"course/6.S081/course_note_p1.md"};function s(l,e,i,p,c,_){return o(),t("div",null,[...e[0]||(e[0]=[r('<h1 id="操作系统" tabindex="-1">操作系统 <a class="header-anchor" href="#操作系统" aria-label="Permalink to &quot;操作系统&quot;">​</a></h1><h2 id="什么是操作系统" tabindex="-1">什么是操作系统 <a class="header-anchor" href="#什么是操作系统" aria-label="Permalink to &quot;什么是操作系统&quot;">​</a></h2><p>操作系统是大陆的翻译，湾湾的翻译应该会更加准确：作业系统。</p><p>操作系统本质就是运行在硬件之上，用户程序之下软件。</p><blockquote><p>举个例子：当用户使用记事本打开某个文件，记事本会先调用操作系统的文件系统开放的接口，然后文件系统又会去调用硬盘开放的接口，其中，文件系统就属于操作系统的一部分。</p></blockquote><p>操作系统的作用</p><ul><li>其中之一的功能就是对硬件进行<strong>抽象</strong>，让用户程序感受不到跟硬件相关的内容。</li><li>另一个重要任务就是，让许多程序复用硬件，例如：后台挂着音乐，前台在玩游戏，就是同时运行两个程序。并且所有同时运行的事情互不干扰，这叫<strong>多路复用</strong>。</li><li>即使一个程序出现 bug ，也不会影响到其他程序，这叫<strong>隔离性</strong>，它的主要思想是，不同的活动不应该互相干涉。</li><li>另一方面，有时有的活动需要互相干扰，比如用文本编辑器打开一个文件，这叫<strong>共享</strong>。</li><li>有的时候，我们希望一些人能读取我的文件，同时希望另外一些人不能读取我的文件，这叫<strong>安全系统</strong>。<br> 我们希望应用程序有良好的<strong>性能</strong>。</li></ul><h1 id="内核" tabindex="-1">内核 <a class="header-anchor" href="#内核" aria-label="Permalink to &quot;内核&quot;">​</a></h1><p><strong>kernel</strong> 是一个特殊的程序，它会一直运行着。它是计算机的资源守护者和管理者，也是开机之后启动的第一个程序。并且内核会帮助很多数据结构加快访问。</p><p>内核的代码和内核外的代码最本质的区别就是内核可以直接访问硬件，而内核外的代码不能，同时内核的代码是常驻内存的。</p><h2 id="操作系统-api" tabindex="-1">操作系统 API <a class="header-anchor" href="#操作系统-api" aria-label="Permalink to &quot;操作系统 API&quot;">​</a></h2><p>程序如果要访问内核，一般都是通过**系统调用（System Call)**实现的，他们看起来像是程序的函数调用。</p>',12)])])}const h=a(n,[["render",s]]);export{d as __pageData,h as default};
